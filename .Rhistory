a3<- glm(usex ~ windx + magn,family="binomial",data = usebin)$coef
a3
exp(a3)
b
exp(b)
usebin <- mutate(shuttle,usex = ifelse(use=="auto",1,0),
headx=ifelse(wind=="head",1,-1),
usex2 = 1-usex)
usebin
b
exp(b)
a5 <- glm(usex ~ windx,family="binomial",data = usebin)$coef
a5
exp(a5)
a5 <- glm(usex2 ~ windx,family="binomial",data = usebin)$coef
a5
exp(a5)
1/b
1/exp(b)
b
a5
InsectSprays
str(InsectSprays)
po1 <- glm(count ~ spray, family = "poisson", data=InsectSprays)
po1
exp(po1)
exp(po1$coefficients)
sprayx <- relevel(InsectSprays$spray,"B")
po1 <- glm(count ~ sprayx, family = "poisson", data=InsectSprays)
po1
exp(po1)
exp(po1$coefficients)
po2 <- glm(count ~ sprayx, family = "poisson", offset=log(1), data=InsectSprays)
po2 <- glm(count ~ sprayx, family = "poisson", offset=log(2), data=InsectSprays)
InsectSprays$visit <- 1
po2 <- glm(count ~ sprayx, family = "poisson", offset=log(visit), data=InsectSprays)
po2
po1
po2 <- glm(count ~ sprayx, family = "poisson", offset=log(visit), data=InsectSprays)
po2$coefficients
po3 <- glm(count ~ sprayx, family = "poisson", offset=log(10) + log(visit), data=InsectSprays)
po3$coefficients
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
knots <- 0
splineTerms <- sapply(knots, function(knot) (x> knot) * (x - knot))
splineTerms
xMat <- cbind(1,x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
lm(y ~ xMat - 1)
plot(x,y)
lines(x,yhat,col="red")
xMat
lm(y[7:11] ~ xMat[7:11,3])
lm(y[6:11] ~ xMat[6:11,3])
lm(y[5:11] ~ xMat[5:11,3])
lm(yhat[6:11] ~ xMat[6:11,3])
lm(yhat[7:11] ~ xMat[7:11,3])
install.packages(""caret"")
install.packages("caret")
library(caret)
spam
data("spam")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
plot(density(spam$your[spam$type=="nonspam"]),
col="blue",main="",xlab="Frequency of 'your'")
lines(density(spam$your[spam$type=="spam"]),col="red")
abline(v=0.5,col="black")
prediction <- ifelse(spam$your > 0.5,"spam","nonspam")
table(prediction,spam$type)/length(spam$type)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Identification of highly correlated variables
M <- abs(cor(training[,-58]))
head(M)
diag(M) <- 0
head(M)
which(M > 0.8,arr.ind=T)
# Correlated predictors
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X <- 0.71*training$num415 + 0.71*training$num857
Y <- 0.71*training$num415 - 0.71*training$num857
plot(X,Y)
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32,40)]
plot(spam[,40],spam[,32])
plot(spam[,40],spam[,34])
plot(spam[,34],spam[,32])
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
plot(prComp$x[,1],prComp$x[,3],col=typeColor,xlab="PC1",ylab="PC2")
plot(prComp$x[,2],prComp$x[,3],col=typeColor,xlab="PC1",ylab="PC2")
plot(spamPC[,1],spamPC[,2],col=typeColor)
plot(spamPC[,1],spamPC[,3],col=typeColor)
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=3)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
plot(spamPC[,1],spamPC[,3],col=typeColor)
plot(spamPC[,2],spamPC[,3],col=typeColor)
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
library(caret);data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
newdata
predict(lm1,newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty = c(1,1,1), lwd=3)
modFit <- train(eruptions ~ waiting,data=trainFaith,method="lm")
summary(modFit$finalModel)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
modFit<- train(wage ~ age + jobclass + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(age,wage,colour=education,data=training)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
plot(finMod$residuals,pch=19)
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
#Get training/test sets
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
#Feature plot
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
#Plot age versus wage
qplot(age,wage,data=training)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
?createDataPartition
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
head(inTrain)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
str(inTrain)
inTrain[[1]]
inTrain[[2]]
inTrain[1
]
inTrain[2]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4,list=FALSE)
inTrain
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
inTrain
names(training)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
str(training)
names(training)
names(training)[1:8]
featurePlot(x=training[,names(training)[1:8]],
y = training$CompressiveStrength,
plot="pairs")
qplot(CompressiveStrength,intrain,colour=age,data=training)
qplot(CompressiveStrength,intrain,colour=Age,data=training)
qplot(CompressiveStrength,inTrain,colour=Age,data=training)
qplot(inTrain, CompressiveStrength,colour=Age,data=training)
library(Hmisc)
cutAge <- cut2(training$Age,g=3)
qplot(inTrain, CompressiveStrength,colour=cutAge,data=training)
cutAge <- cut2(training$Age,g=4)
qplot(inTrain, CompressiveStrength,colour=cutAge,data=training)
names(training)
cutCement <- cut2(training$Cement,g=4)
qplot(inTrain, CompressiveStrength,colour=cutCement,data=training)
cutBlastFurnaceSlag <- cut2(training$BlastFurnaceSlag,g=4)
qplot(inTrain, CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
cutFlyAsh <- cut2(training$FlyAsh,g=4)
qplot(inTrain, CompressiveStrength,colour=cutFlyAsh,data=training)
cutWater <- cut2(training$Water,g=4)
qplot(inTrain, CompressiveStrength,colour=cutWater,data=training)
cutSuperplasticizer <- cut2(training$Superplasticizer,g=4)
qplot(inTrain, CompressiveStrength,colour=cutSuperplasticizer,data=training)
cutCoarseAggregate <- cut2(training$CoarseAggregate,g=4)
qplot(inTrain, CompressiveStrength,colour=cutCoarseAggregate,data=training)
cutFineAggregate <- cut2(training$FineAggregate,g=4)
qplot(inTrain, CompressiveStrength,colour=cutFineAggregate,data=training)
cutAge <- cut2(training$Age,g=4)
qplot(inTrain, CompressiveStrength,colour=cutAge,data=training)
cutCement <- cut2(training$Cement,g=4)
qplot(inTrain, CompressiveStrength,colour=cutCement,data=training)
cutBlastFurnaceSlag <- cut2(training$BlastFurnaceSlag,g=4)
qplot(inTrain, CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
cutFlyAsh <- cut2(training$FlyAsh,g=4)
qplot(inTrain, CompressiveStrength,colour=cutFlyAsh,data=training)
cutFlyAsh <- cut2(training$FlyAsh,g=3)
qplot(inTrain, CompressiveStrength,colour=cutFlyAsh,data=training)
cutFlyAsh <- cut2(training$FlyAsh,g=3)
qplot(inTrain, CompressiveStrength,colour=cutFlyAsh,data=training)
cutFlyAsh <- cut2(training$FlyAsh,g=2)
qplot(inTrain, CompressiveStrength,colour=cutFlyAsh,data=training)
cutCement <- cut2(training$Cement,g=2)
qplot(inTrain, CompressiveStrength,colour=cutCement,data=training)
cutBlastFurnaceSlag <- cut2(training$BlastFurnaceSlag,g=2)
qplot(inTrain, CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
cutWater <- cut2(training$Water,g=2)
qplot(inTrain, CompressiveStrength,colour=cutWater,data=training)
cutSuperplasticizer <- cut2(training$Superplasticizer,g=2)
qplot(inTrain, CompressiveStrength,colour=cutSuperplasticizer,data=training)
cutCoarseAggregate <- cut2(training$CoarseAggregate,g=2)
qplot(inTrain, CompressiveStrength,colour=cutCoarseAggregate,data=training)
cutFineAggregate <- cut2(training$FineAggregate,g=2)
qplot(inTrain, CompressiveStrength,colour=cutFineAggregate,data=training)
cutAge <- cut2(training$Age,g=2)
qplot(inTrain, CompressiveStrength,colour=cutAge,data=training)
qplot(inTrain, CompressiveStrength,colour=cutFlyAsh,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
summary(training$Superplasticizer)
hist(log(training$Superplasticizer + 1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
a <- names(training)
a
grep("^Il",a)
grep("^IL",a)
atraining <- training[,c(1,grep("^IL", names(training)))]
dim(training)
dim(atraining)
str(atraining)
preProc <- preProcess(atraining[,-1]),method="pca")
preProc <- preProcess(atraining[,-1],method="pca")
preProc
preProc <- preProcess(atraining[,-1],method="pca",pcaComp=2)
preProc <- preProcess(atraining[,-1],method="pca",pcaComp=2)
preProc
preProc <- preProcess(atraining[,-1],method="pca",pcaComp=3)
preProc
spamPC <- predict(preProc,atraining[,-1])
preProc <- preProcess(atraining[,-1],method="pca",pcaComp=2)
spamPC <- predict(preProc,atraining[,-1])
plot(spamPC[,1],spamPC[,2],col=typeColor)
plot(spamPC[,1],spamPC[,2])
trainPC <- predict(preProc,atraining[,-1])
modelFit <- train(atraining$diagnosis ~ .,method="glm",data=trainPC)
?preProc
?preProcess
preProcess(atraining[,-1],thresh = .9, method="pca")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
atraining <- training[,c(1,grep("^IL", names(training)))]
atesting <- testing[,c(1,grep("^IL", names(testing)))]
preProcess(atraining[,-1],thresh = .8, method="pca")
preProcess(atraining[,-1],thresh = .8, method="pca")
preProc <- preProcess(atraining[,-1], method="pca",pcaComp=7)
trainPC <- predict(preProc,atraining[,-1])
preProcess(atraining[,-1],thresh = .8, method="pca")
preProc <- preProcess(atraining[,-1], method="pca",pcaComp=7)
trainPC <- predict(preProc,atraining[,-1])
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
modelFit <- train(atraining$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,atesting[,-1])
confusionMatrix(atesting$diagnosis,predict(modelFit,testPC))
head(preProc)
modelFit <- train(training$diagnosis ~ .,method="glm",data=training)
modelFit <- train(atraining$diagnosis ~ .,method="glm",data=atraining)
confusionMatrix(atesting$diagnosis,predict(modelFit,atesting[,-1]))
data(iris); library(ggplot2); library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~ .,data=training,method="lda")
modnb = train(Species ~ ., data=training,method="nb")
modnb = train(Species ~ ., data=training,method="nb")
plda = predict(modlda,testing); pnb = predict(modnb,testing)
table(plda,pnb)
equalPredictions = (plda==pnb)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
training <- subset(segmentationOriginal, Class=="Train")
View(segmentationOriginal)
training <- subset(segmentationOriginal, Case=="Train")
View(training)
testing <- subset(segmentationOriginal, Case=="Test")
dim(segmentationOriginal); dim(training) ; dim(testing)
str(segmentationOriginal)
modFit <- train(Class ~ .,method="rpart",data=training)
nda <- data.frame(c(TotalIntench2 = 23000,FiberWidthCh1 = 10, PerimStatusCh1=2))
nda
nda <- data.frame(c(TotalIntench2 = 23000;FiberWidthCh1 = 10; PerimStatusCh1=2))
nda <- data.frame(cbind(TotalIntench2 = 23000,FiberWidthCh1 = 10,
PerimStatusCh1=2))
nda
predict(modFit,newdata=nda)
head(training)
str(training)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit$finalModel,newdata=nda)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
head(olive)
str(olive)
olive = olive[,-1]
head(olive)
str(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
print(modFit$finalModel)
#Prettier plots
library(rattle)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(modFit$finalModel,newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
trainSA = SAheart[train,-c(1,4,5)]
str(trainSA)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
modelFit <- train(chd ~.,data=trainSA[,-c(1,4,5)],
method="glm",family="binomial")
modelFit <- train(as.factor(chd) ~.,data=trainSA[,-c(1,4,5)],
method="glm",family="binomial")
modelFit
testC <- predict(modelFit,testSA[,-c(1,4,5)])
str(testC)
testSA
str(testSA)
testC <- predict(modelFit,testSA[,-c(1,4,5,10)])
testC
modelFit
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA[,10],testC)
str(testC)
str(testSA)
missClass(testSA[,10],as.integer(testC))
modelFit
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
set.seed(13234)
modelFit <- train(as.factor(chd) ~.,data=trainSA[,-c(1,4,5)],
method="glm",family="binomial")
modelFit
testC <- predict(modelFit,testSA[,-c(1,4,5,10)])
testC
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA[,10],as.integer(testC))
modelFit
testSA[,10]
as.integer(testC)
trainC <- predict(modelFit,trainSA[,-c(1,4,5,10)])
missClass(trainSA[,10],as.integer(testC))
1-missClass(trainSA[,10],as.integer(testC))
1-missClass(testSA[,10],as.integer(testC))
modelFit
missClass(testSA[,10],as.integer(testC))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
modFit <- train(as.factor(y)~ .,data=training,method="rf",prox=TRUE)
modFit <- train(as.factor(y)~ .,data=vowel.train,method="rf",prox=TRUE)
modFit
?train
?varImp
varImp(modFit)
varImpPlot(modFit)
a<-varImp(modFit)
varImpPlot(a)
a
set.seed(13234)
modelFit <- train(as.factor(chd) ~.,data=trainSA[,-c(1,4,5)],
method="glm",family="binomial")
modelFit
testC <- predict(modelFit,testSA[,-c(1,4,5,10)])
testC
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA[,10],as.integer(testC))
trainC <- predict(modelFit,trainSA[,-c(1,4,5,10)])
1-missClass(trainSA[,10],as.integer(testC))
confusionMatrix(testing$type,predict(modelFit,testC))
confusionMatrix(testSA$chd,predict(modelFit,testC))
testC <- predict(modelFit,testSA[,-c(1,4,5,10)])
confusionMatrix(testSA$chd,predict(modelFit,testC))
modelFit
testC <- predict(modelFit,testSA[,-c(1,4,5,10)])
confusionMatrix(testSA$chd,predict(modelFit,testSA[,-c(1,4,5,10)]))
1-0.6883
suppressMessages(library(caret))
library(caret)
setwd("C:/Users/logo403/Documents/R/work/ml/project")
